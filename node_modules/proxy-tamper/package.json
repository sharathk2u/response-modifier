{
  "name": "proxy-tamper",
  "description": "A HTTP proxy library for node.js that allows for selective requests to be tampered.",
  "keywords": [
    "proxy",
    "tamper"
  ],
  "author": {
    "name": "Thomas Sydorowski"
  },
  "version": "0.1.3",
  "licenses": [
    {
      "type": "MIT",
      "url": "https://raw.github.com/tsyd/proxy-tamper/master/LICENSE"
    }
  ],
  "engines": {
    "node": ">=0.10.0"
  },
  "main": "./lib/proxy-tamper.js",
  "homepage": "http://github.com/tsyd/proxy-tamper",
  "bugs": {
    "url": "https://github.com/tsyd/proxy-tamper/issues"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/tsyd/proxy-tamper.git"
  },
  "readmeFilename": "README.md",
  "readme": "# proxy-tamper\n\nA HTTP proxy library for node.js that allows for selective requests to be tampered.\n\n## Installation\n\nEither install via `npm`:\n\n    npm install proxy-tamper\n\nOr via a `git clone`:\n\n    cd node_modules\n    git clone git://github.com/tsyd/proxy-tamper.git\n    npm link\n\n## Example\n\nThe following example demonstrates `proxy-tamper` abilities:\n\n    var proxy = require('proxy-tamper').start({port: 8080});\n\n    // block all URLs that contain 'block' in them\n    proxy.tamper(/block/, 'This content is blocked!');\n   \n    // disallow Google \n    proxy.tamper(/google/, function (request) {\n      request.url = request.url.replace(/google/g, 'bing'); \n    });\n\n    // replace all instances of 'Apple' with 'Orange' in Techcrunch articles\n    proxy.tamper(/techcrunch.com.*\\/$/, function (request) {\n      // gzip encoding is not supported when tampering the body\n      delete request.headers['accept-encoding'];\n\n      request.onResponse(function (response) {\n        // tamper the body\n        response.body = response.body.replace(/Apple/g, 'Orange');\n        response.headers['server'] = 'proxy-tamper 1337';\n\n        // complete the response\n        response.complete();\n      }); \n    });\n\nTo tamper HTTP requests with a string or result of a function call, specify a regular expression for the URL and a string or function:\n\n    proxy.tamper(/block/, 'This content is blocked!');\n\nThe response body of all URLs that contain `block` in them will be `This content is blocked!'.\n\nIt is possible to manipulate the original request before it's executed over the proxy. The request object has access to `request.url`, `request.headers`, and `request.method`:\n\n    proxy.tamper(/google/, function (request) {\n      request.url = request.url.replace(/google/g, 'bing'); \n    });\n\nIt is also possible to modify the response before proxying it back to the original request by specifying an `onResponse` handler:\n    \n    // replace all instances of 'Apple' with 'Orange' in Techcrunch articles\n    proxy.tamper(/techcrunch.com.*\\/$/, function (request) {\n      // gzip encoding is not supported when tampering the body\n      delete request.headers['accept-encoding'];\n\n      request.onResponse(function (response) {\n        // tamper the body\n        response.body = response.body.replace(/Apple/g, 'Orange');\n        response.headers['server'] = 'proxy-tamper 1337';\n\n        // complete the response\n        response.complete();\n      }); \n    });\n\nThe `onResponse` handler has read and write access to a subset of the `http.ClientResponse` response object, namely: `response.headers`, `response.statusCode`, and `response.url`. The `onResponse` handler may also modfiy the string representation of the response body by accessing `response.body`.\n\n### Usage\n\nTo test the example application, simply run:\n\n    node example.js\n\nThen set your browser to use `127.0.0.1:8080` as the HTTP proxy, and visit the following URLs:\n\n * <http://google.com/block/>\n * <http://techcrunch.com/tag/apple/>\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2011 Thomas Sydorowski\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "_id": "proxy-tamper@0.1.3",
  "dist": {
    "shasum": "f692d7dfcf7c0aeb9cfe176e0845922bedd20f10",
    "tarball": "http://registry.npmjs.org/proxy-tamper/-/proxy-tamper-0.1.3.tgz"
  },
  "_from": "proxy-tamper@*",
  "_npmVersion": "1.3.8",
  "_npmUser": {
    "name": "tsyd",
    "email": "thomas@tsyd.net"
  },
  "maintainers": [
    {
      "name": "tsyd",
      "email": "thomas@tsyd.net"
    }
  ],
  "directories": {},
  "_shasum": "f692d7dfcf7c0aeb9cfe176e0845922bedd20f10",
  "_resolved": "https://registry.npmjs.org/proxy-tamper/-/proxy-tamper-0.1.3.tgz"
}
